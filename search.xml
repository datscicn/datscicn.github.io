<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>一起学Java | 002.Java语法基础</title>
    <url>/2020/07/02/yi-qi-xue-java-002-java-yu-fa-ji-chu/</url>
    <content><![CDATA[<p>本节我们将介绍Java程序的基础知识，包括：</p>
<ul>
<li>Java程序基本结构</li>
<li>变量和数据类型</li>
<li>整数运算</li>
<li>浮点数运算</li>
<li>布尔运算</li>
<li>字符和字符串</li>
<li>数组类型</li>
</ul>
<a id="more"></a>
<h1 id="1-Java程序基本结构"><a href="#1-Java程序基本结构" class="headerlink" title="1.Java程序基本结构"></a>1.Java程序基本结构</h1><p>我们先剖析一个完整的Java程序，它的基本结构是什么：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * a3.需要写在类和方法的定义处，可以用于自动创建文档</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;<span class="comment">// 类名是Hello,public是访问修饰符，表示该class是公开的</span></span><br><span class="line">    <span class="comment">//在class内部，可以定义若干方法（method）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//方法名是main，返回值是void，表示没有任何返回值。</span></span><br><span class="line">    <span class="comment">//方法必须是静态方法，方法名必须为main，括号内的参数必须是String数组</span></span><br><span class="line">    <span class="comment">//Java的每一行语句必须以分号结束</span></span><br><span class="line">        <span class="comment">// a1.单行注释,向屏幕输出文本:</span></span><br><span class="line">        System.out.println(<span class="string">"Hello, world1!"</span>);</span><br><span class="line">        System.out.println(<span class="string">"Hello, world2!"</span>);</span><br><span class="line">        <span class="comment">/* a2.多行注释开始</span></span><br><span class="line"><span class="comment">        注释内容</span></span><br><span class="line"><span class="comment">        注释结束 */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">// class定义结束</span></span><br></pre></td></tr></table></figure>
<h1 id="2-变量和数据类型"><a href="#2-变量和数据类型" class="headerlink" title="2.变量和数据类型"></a>2.变量和数据类型</h1><h2 id="2-1-变量"><a href="#2-1-变量" class="headerlink" title="2.1.变量"></a>2.1.变量</h2><p>在Java中，变量分为两种：基本类型的变量和引用类型的变量。<br>下面，介绍基本类型变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Var</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">100</span>; <span class="comment">// 定义int类型变量x，并赋予初始值100</span></span><br><span class="line">                     <span class="comment">// 不写初始值则为默认值`0`</span></span><br><span class="line">        System.out.println(<span class="string">"x初始值："</span>+x); <span class="comment">// 打印该变量的值</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//变量可以重新赋值,不需申明类型。例如，对变量x，先赋值100，再赋值200</span></span><br><span class="line">        x=<span class="number">123</span>;</span><br><span class="line">        System.out.println(<span class="string">"x重新赋值："</span>+x);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//赋值给别的变量，需创建y</span></span><br><span class="line">        <span class="keyword">int</span> y = x; <span class="comment">// 变量y赋值为n（x的值为123，因此赋值后y的值也是123）</span></span><br><span class="line">        System.out.println(<span class="string">"y的值为： "</span> + y); <span class="comment">// 打印y的值</span></span><br><span class="line"></span><br><span class="line">        y = y + <span class="number">100</span>; <span class="comment">// 变量y赋值为y+100,即123+100=223</span></span><br><span class="line">        System.out.println(<span class="string">"x = "</span> + x); <span class="comment">// 打印x的值</span></span><br><span class="line">        System.out.println(<span class="string">"y = "</span> + y); <span class="comment">// 再次打印y的值，为223</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-2-基本数据类型"><a href="#2-2-基本数据类型" class="headerlink" title="2.2.基本数据类型"></a>2.2.基本数据类型</h2><p>基本数据类型是CPU可以直接进行运算的类型。Java定义了以下几种基本数据类型：</p>
<ul>
<li>整数类型：byte，short，int，long</li>
<li>浮点数类型：float，double</li>
<li>字符类型：char</li>
<li>布尔类型：boolean<br>不同的数据类型占用的字节数不一样。我们看一下Java基本数据类型占用的字节数：  </li>
</ul>
<table>
<thead>
<tr>
<th>byte</th>
<th>short</th>
<th>int</th>
<th>long</th>
<th>float</th>
<th>double</th>
<th>char</th>
</tr>
</thead>
<tbody><tr>
<td>1字节</td>
<td>2字节</td>
<td>4字节</td>
<td>8字节</td>
<td>4字节</td>
<td>8字节</td>
<td>2字节</td>
</tr>
</tbody></table>
<h3 id="2-2-1-整型"><a href="#2-2-1-整型" class="headerlink" title="2.2.1.整型"></a>2.2.1.整型</h3><p>对于整型类型，Java只定义了带符号的整型，因此，最高位的bit表示符号位（0表示正数，1表示负数）。各种整型能表示的最大范围如下：</p>
<ul>
<li>byte：-128 ~ 127</li>
<li>short: -32768 ~ 32767</li>
<li>int: -2147483648 ~ 2147483647</li>
<li>long: -9223372036854775808 ~ 9223372036854775807<br>我们来看定义整型的例子：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义整型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">2147483647</span>;</span><br><span class="line">        <span class="keyword">int</span> i2 = -<span class="number">2147483648</span>;</span><br><span class="line">        <span class="keyword">int</span> i3 = <span class="number">2_000_000_000</span>; <span class="comment">// 加下划线更容易识别,类似逗号</span></span><br><span class="line">        <span class="keyword">int</span> i4 = <span class="number">0xff0000</span>; <span class="comment">// 十六进制表示的16711680</span></span><br><span class="line">        <span class="keyword">int</span> i5 = <span class="number">0b1000000000</span>; <span class="comment">// 二进制表示的512</span></span><br><span class="line">        <span class="keyword">long</span> l = <span class="number">9000000000000000000L</span>; <span class="comment">// long型的结尾需要加L</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
特别注意：同一个数的不同进制的表示是完全相同的，例如15=0xf＝0b1111。</li>
</ul>
<h3 id="2-2-2-浮点型"><a href="#2-2-2-浮点型" class="headerlink" title="2.2.2.浮点型"></a>2.2.2.浮点型</h3><p>浮点类型的数就是小数，因为小数用科学计数法表示的时候，小数点是可以“浮动”的，如1234.5可以表示成12.345x102，也可以表示成1.2345x103，所以称为浮点数。</p>
<p>下面是定义浮点数的例子：</p>
<p>float f1 = 3.14f;<br>float f2 = 3.14e38f; // 科学计数法表示的3.14x10^38<br>double d = 1.79e308;<br>double d2 = -1.79e308;<br>double d3 = 4.9e-324; // 科学计数法表示的4.9x10^-324<br>对于float类型，需要加上f后缀。</p>
<p>浮点数可表示的范围非常大，float类型可最大表示3.4x1038，而double类型可最大表示1.79x10308。</p>
]]></content>
      <categories>
        <category>编程基础</category>
      </categories>
      <tags>
        <tag>语法</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>一起学Java | 001.Java基本介绍</title>
    <url>/2020/07/01/yi-qi-xue-java-001-java-ji-ben-jie-shao/</url>
    <content><![CDATA[<h1 id="1-Java语言简介"><a href="#1-Java语言简介" class="headerlink" title="1.Java语言简介"></a>1.Java语言简介</h1><p>&emsp;&emsp;Java介于编译型语言和解释型语言之间。   </p>
<a id="more"></a>
<p>&emsp;&emsp;编译型语言如C、C++，代码是直接编译成机器码执行，但是不同的平台（x86、ARM等）CPU的指令集不同，因此，需要编译出每一种平台的对应机器码。<br>&emsp;&emsp;解释型语言如Python、Ruby没有这个问题，可以由解释器直接加载源码然后运行，代价是运行效率太低。<br>&emsp;&emsp;而Java是将代码编译成一种“字节码”，它类似于抽象的CPU指令，然后，针对不同平台编写虚拟机，不同平台的虚拟机负责加载字节码并执行，这样就实现了“一次编写，到处运行”的效果。<br>&emsp;&emsp;对于虚拟机，需要为每个平台分别开发。为了保证不同平台、不同公司开发的虚拟机都能正确执行Java字节码，SUN公司制定了一系列的Java虚拟机规范。从实践的角度看，JVM的兼容性做得非常好，低版本的Java字节码完全可以正常运行在高版本的JVM上。</p>
<h2 id="1-1-Java的3个版本"><a href="#1-1-Java的3个版本" class="headerlink" title="1.1.Java的3个版本"></a>1.1.Java的3个版本</h2><p>Java又分出了三个不同版本，三者依次包含</p>
<table>
<thead>
<tr>
<th>版本</th>
<th>全称</th>
<th>学习建议</th>
</tr>
</thead>
<tbody><tr>
<td>Java ME</td>
<td>微缩版Micro Edition</td>
<td>不建议学习</td>
</tr>
<tr>
<td>Java SE</td>
<td>标准版Standard Edition</td>
<td>掌握Java语言本身、Java核心开发技术以及Java标准库的使用</td>
</tr>
<tr>
<td>Java EE</td>
<td>企业版Enterprise Edition</td>
<td>Spring框架、数据库开发、分布式架构</td>
</tr>
</tbody></table>
<h2 id="1-2-JRE-amp-JDK"><a href="#1-2-JRE-amp-JDK" class="headerlink" title="1.2.JRE&amp;JDK"></a>1.2.JRE&amp;JDK</h2><p>JRE：Java Runtime Environment<br>JDK：Java Development Kit<br>JRE就是运行Java字节码的虚拟机。但是，如果只有Java源码，要编译成Java字节码，就需要JDK，因为JDK除了包含JRE，还提供了编译器、调试器等开发工具。</p>
<h2 id="1-3-JDK安装及IDE"><a href="#1-3-JDK安装及IDE" class="headerlink" title="1.3.JDK安装及IDE"></a>1.3.JDK安装及IDE</h2><p>从<a href="https://www.oracle.com/java/technologies/javase-downloads.html" target="_blank" rel="noopener">Oracle的官网</a>上下载最新的稳定版jdk13<br>设置环境变量<br>在Mac下，<code>vim ~/.bash_profile</code>添加<br><code>export PATH=$JAVA_HOME/bin:$PATH</code><br>把JAVA_HOME的bin目录添加到PATH中是为了在任意文件夹下都可以运行java。打开命令提示符窗口，输入命令java -version，如果一切正常，你会看到如下输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java version <span class="string">"13-ea"</span> 2019-09-17</span><br><span class="line">Java(TM) SE Runtime Environment (build 13-ea+33)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 13-ea+33, mixed mode, sharing)</span><br></pre></td></tr></table></figure>

<h1 id="2-Java代码运行"><a href="#2-Java代码运行" class="headerlink" title="2.Java代码运行"></a>2.Java代码运行</h1><h2 id="2-1-HelloWord"><a href="#2-1-HelloWord" class="headerlink" title="2.1.HelloWord"></a>2.1.HelloWord</h2><p>创建文件Hello.java，输入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello, world!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码解释：  </p>
<ul>
<li>public表示这个类是公开的，class用来定义一个类，Hello是类的名字，{}中间则是类的定义</li>
<li>类的定义中，我们定义了一个名为main的方法</li>
<li>方法名main，还有用()括起来的方法参数，这里的main方法有一个参数，参数类型是String[]，参数名是args</li>
<li>public、static用来修饰方法，这里表示它是一个公开的静态方法</li>
</ul>
<h2 id="2-2-如何运行Java程序"><a href="#2-2-如何运行Java程序" class="headerlink" title="2.2.如何运行Java程序"></a>2.2.如何运行Java程序</h2><p>Java源码本质上是一个文本文件，我们需要先用javac把Hello.java编译成字节码文件Hello.class，然后，用java命令执行这个class字节码文件：<br>第一步，在保存Hello.java的目录下执行命令<code>javac Hello.java</code>，生成<code>Hello.class</code>文件<br>第二步，执行Hello.class，使用命令<code>java Hello</code>，运行结束。<br>或者，可直接运行<code>java Hello.java</code>。  </p>
<h2 id="2-3-IDE的使用"><a href="#2-3-IDE的使用" class="headerlink" title="2.3.IDE的使用"></a>2.3.IDE的使用</h2><p>1.安装Eclipse<br>Eclipse的发行版提供了预打包的开发环境，包括Java、JavaEE、C++、PHP、Rust等。<br>我们需要下载的版本是Eclipse IDE for Java Developers<br><img src="/2020/07/01/yi-qi-xue-java-001-java-ji-ben-jie-shao/tu1.png" alt="logo"><br>2.新建项目HelloWorld，不勾选“Create module-info.java file”<br>3.新建Java文件并运行<br>展开HelloWorld工程，选中源码目录src，点击右键，在弹出菜单中选择“New”-“Class”：<br>自动在src目录下创建了一个名为Hello.java的源文件<br>选中文件Hello.java，点击右键，在弹出的菜单中选中“Run As…”-“Java Application”：</p>
]]></content>
      <categories>
        <category>编程基础</category>
      </categories>
      <tags>
        <tag>语法</tag>
        <tag>IDE</tag>
      </tags>
  </entry>
  <entry>
    <title>任务调度与报表系统—操作说明手册</title>
    <url>/2020/05/26/ren-wu-diao-du-yu-bao-biao-xi-tong-cao-zuo-shuo-ming-shou-ce/</url>
    <content><![CDATA[<h1 id="1-系统功能简介"><a href="#1-系统功能简介" class="headerlink" title="1 系统功能简介"></a>1 系统功能简介</h1><h2 id="1-1-任务调度系统"><a href="#1-1-任务调度系统" class="headerlink" title="1.1 任务调度系统"></a>1.1 任务调度系统</h2><a id="more"></a>
<h3 id="1-1-1-简介"><a href="#1-1-1-简介" class="headerlink" title="1.1.1 简介"></a>1.1.1 简介</h3><p>不同组别中间表任务可配置成不同工作域，不同域之间独立运行、独立调度</p>
<h3 id="1-1-2-工作目录"><a href="#1-1-2-工作目录" class="headerlink" title="1.1.2 工作目录"></a>1.1.2 工作目录</h3><ul>
<li>本机: /Users/zhangqiang/DATSCI/数据实验室/数据报表  </li>
<li>服务器: /home/mission<h3 id="1-1-3-文件说明"><a href="#1-1-3-文件说明" class="headerlink" title="1.1.3 文件说明"></a>1.1.3 文件说明</h3></li>
<li><code>table_mission_域名.py</code> 该域内的任务调度主文件</li>
<li><code>table_remission.py</code>  任务失败重跑调度文件，需要输入执行参数，只支持单域名内重跑<blockquote>
<p>var1 var2 var3 var4….<br>var1:该脚本绝对地址<br>var2:任务域名<br>var3:是否重跑下游任务，false/true<br>var.:中间表文件相对文件名称，空格分隔</p>
</blockquote>
</li>
</ul>
<h3 id="1-1-4-目录说明"><a href="#1-1-4-目录说明" class="headerlink" title="1.1.4 目录说明"></a>1.1.4 目录说明</h3><p>文件夹<code>mid_table_域名</code>为该域名下所有调度所有SQL执行脚本，内可设子目录进行分门别类，便于管理<br>文件夹<code>log_mid_table</code>为日志目录，存储各域的ods数据量(ods_log_<code>域名</code>)、任务调度日志(run_log_<code>域名)、任务重跑日志(rerun_log_</code>域名)，均为Excel文件格式  </p>
<blockquote>
<p><code>调度文件py使用详见py文件内容</code></p>
</blockquote>
<h2 id="1-2-报表展示平台"><a href="#1-2-报表展示平台" class="headerlink" title="1.2 报表展示平台"></a>1.2 报表展示平台</h2><h3 id="1-2-1-简介"><a href="#1-2-1-简介" class="headerlink" title="1.2.1 简介"></a>1.2.1 简介</h3><ul>
<li>准备图表所需数据</li>
<li>按照图表配置进行制图</li>
</ul>
<h3 id="1-2-2-工作目录"><a href="#1-2-2-工作目录" class="headerlink" title="1.2.2 工作目录"></a>1.2.2 工作目录</h3><ul>
<li>本机: /Users/zhangqiang/DATSCI/风控实验室/风控报表  </li>
<li>服务器: /home/mission</li>
</ul>
<h3 id="1-2-3-文件说明"><a href="#1-2-3-文件说明" class="headerlink" title="1.2.3 文件说明"></a>1.2.3 文件说明</h3><ul>
<li><code>data_域名.py</code> 该域内的图表数据准备主文件</li>
<li><code>work_域名.py</code> 该域内的制图主文件</li>
<li><code>report_域名_html_list.xlsx</code>用于记录html文件名，便于次日删除</li>
</ul>
<h3 id="1-2-4-目录说明"><a href="#1-2-4-目录说明" class="headerlink" title="1.2.4 目录说明"></a>1.2.4 目录说明</h3><p>文件夹<code>report_sql_域名</code>为该域名下所有报表所需数据执行SQL文件，需要按照报表类别命名排序<br>文件夹<code>report_data_域名</code>为该域名下报表所需数据的存储目录，按天存储，数据文件名为SQL文件名，均为Excel文件格式<br>文件夹<code>report_file_域名</code>为该域名下所有生成的HTML报表文件</p>
<blockquote>
<p><code>调度文件py使用详见py文件内容</code></p>
</blockquote>
<h1 id="2-代码部署"><a href="#2-代码部署" class="headerlink" title="2.代码部署"></a>2.代码部署</h1><h2 id="2-1-文件上传"><a href="#2-1-文件上传" class="headerlink" title="2.1 文件上传"></a>2.1 文件上传</h2><h3 id="任务调度系统"><a href="#任务调度系统" class="headerlink" title="任务调度系统"></a>任务调度系统</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scp -r  &#x2F;Users&#x2F;zhangqiang&#x2F;DATSCI&#x2F;数据实验室&#x2F;数据报表&#x2F;table_mission_risk.py vm1:&#x2F;home&#x2F;mission&#x2F;   </span><br><span class="line">scp -r  &#x2F;Users&#x2F;zhangqiang&#x2F;DATSCI&#x2F;数据实验室&#x2F;数据报表&#x2F;table_remission.py vm1:&#x2F;home&#x2F;mission&#x2F;   </span><br><span class="line">scp -r  &#x2F;Users&#x2F;zhangqiang&#x2F;DATSCI&#x2F;数据实验室&#x2F;数据报表&#x2F;table_mission_atlantis.py vm1:&#x2F;home&#x2F;mission&#x2F;</span><br></pre></td></tr></table></figure>
<h3 id="报表展示平台"><a href="#报表展示平台" class="headerlink" title="报表展示平台"></a>报表展示平台</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scp -r  &#x2F;Users&#x2F;zhangqiang&#x2F;DATSCI&#x2F;风控实验室&#x2F;风控报表&#x2F;data_risk.py vm1:&#x2F;home&#x2F;mission&#x2F;    </span><br><span class="line">scp -r  &#x2F;Users&#x2F;zhangqiang&#x2F;DATSCI&#x2F;风控实验室&#x2F;风控报表&#x2F;work_risk.py vm1:&#x2F;home&#x2F;mission&#x2F;</span><br></pre></td></tr></table></figure>

<h2 id="2-2-Git同步"><a href="#2-2-Git同步" class="headerlink" title="2.2 Git同步"></a>2.2 Git同步</h2><h3 id="2-2-1-本机同步到gitlab"><a href="#2-2-1-本机同步到gitlab" class="headerlink" title="2.2.1 本机同步到gitlab"></a>2.2.1 本机同步到gitlab</h3><ul>
<li>进入目录<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -u -m &#39;备注&#39;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>
目录包含:Python包、中间表SQL、报表SQL     </li>
</ul>
<h3 id="2-2-2-gitlab同步到服务器"><a href="#2-2-2-gitlab同步到服务器" class="headerlink" title="2.2.2 gitlab同步到服务器"></a>2.2.2 gitlab同步到服务器</h3><blockquote>
<p>scp -r  /Users/zhangqiang/DATSCI/风控实验室/风控报表/gits.sh vm1:/home/mission/   </p>
</blockquote>
<p>内容如下  </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/lib64/python3.6/site-packages/report   </span><br><span class="line">git pull --rebase origin master</span><br><span class="line"><span class="built_in">cd</span> /usr/lib64/python3.6/site-packages/tools</span><br><span class="line">git pull --rebase origin master</span><br><span class="line"><span class="built_in">cd</span> /home/mission/mid_table_risk</span><br><span class="line">git pull --rebase origin master</span><br><span class="line"><span class="built_in">cd</span> /home/mission/mid_table_atlantis</span><br><span class="line">git pull --rebase origin master</span><br><span class="line"><span class="built_in">cd</span> /home/mission/report_sql_risk</span><br><span class="line">git pull --rebase origin master</span><br></pre></td></tr></table></figure>
<h2 id="2-3-一次性同步文件"><a href="#2-3-一次性同步文件" class="headerlink" title="2.3 一次性同步文件"></a>2.3 一次性同步文件</h2><p>scp -r  /Users/zhangqiang/DATSCI/风控实验室/风控报表/report_file/echarts.min.js vm1:/usr/share/nginx/html<br>scp -r  /Users/zhangqiang/DATSCI/风控实验室/风控报表/report_file/vintage.js vm1:/usr/share/nginx/html<br>scp -r  /Users/zhangqiang/DATSCI/风控实验室/风控报表/report_file/vintage.js vm1:/usr/share/nginx/html<br>scp -r  /Users/zhangqiang/DATSCI/风控实验室/风控报表/report_file/shine.js vm1:/usr/share/nginx/html<br>scp -r  /Users/zhangqiang/DATSCI/风控实验室/风控报表/report_file/macarons.js vm1:/usr/share/nginx/html</p>
<h1 id="3-定时任务"><a href="#3-定时任务" class="headerlink" title="3.定时任务"></a>3.定时任务</h1><blockquote>
<p>crontab -e   </p>
</blockquote>
<p>内容如下</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">0 4 * * * /home/mission/gits.sh</span><br><span class="line">0 6 * * * python3 /home/mission/table_mission_risk.py</span><br><span class="line">0 8 * * * python3 /home/mission/data_risk.py</span><br><span class="line">30 8 * * * python3 /home/mission/work_risk.py </span><br><span class="line">0 9 * * * python3 /home/mission/table_mission_atlantis.py</span><br></pre></td></tr></table></figure>

<h1 id="4-本地部署"><a href="#4-本地部署" class="headerlink" title="4 本地部署"></a>4 本地部署</h1><h2 id="4-1-本地执行"><a href="#4-1-本地执行" class="headerlink" title="4.1 本地执行"></a>4.1 本地执行</h2><p>python3 /home/mission/table_mission_risk.py<br>python3 /home/mission/data_risk.py<br>python3 /home/mission/work_risk.py<br>python3 /home/mission/table_mission_atlantis.py</p>
<h2 id="4-2-服务器同步至本地"><a href="#4-2-服务器同步至本地" class="headerlink" title="4.2 服务器同步至本地"></a>4.2 服务器同步至本地</h2><p>scp -r   vm1:/home/mission/report_data/2020-05-26  /Users/zhangqiang/DATSCI/风控实验室/风控报表/report_data<br>scp -r   vm1:/home/mission/log/ods_log_2020_05_24.xlsx  /Users/zhangqiang/<br>scp -r   vm1:/home/mission/log/run_log_2020_05_24.xlsx  /Users/zhangqiang/</p>
]]></content>
      <categories>
        <category>编程基础</category>
      </categories>
      <tags>
        <tag>报表</tag>
      </tags>
  </entry>
  <entry>
    <title>文章模板</title>
    <url>/2020/04/10/wen-zhang-mo-ban/</url>
    <content><![CDATA[<p><img src="/2020/04/10/wen-zhang-mo-ban/q.jpg" alt></p>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>标签1</tag>
        <tag>标签2</tag>
      </tags>
  </entry>
  <entry>
    <title>目录大全|编程基础</title>
    <url>/2020/07/15/mu-lu-da-quan-bian-cheng-ji-chu/</url>
    <content><![CDATA[<p>编程基础相关目录汇总</p>
<a id="more"></a>

<blockquote>
<p>一起学Java系列</p>
</blockquote>
<ul>
<li>一起学Java-001-Java基本介绍</li>
<li>一起学Java-002-Java语法基础</li>
</ul>
<blockquote>
<p>一起学Python系列</p>
</blockquote>
<ul>
<li>一起学Python-001-</li>
<li>一起学Python-002-</li>
</ul>
<blockquote>
<p>精品项目</p>
</blockquote>
<ul>
<li>评分卡系列</li>
<li>任务调度系统</li>
<li>报表系统</li>
</ul>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>目录</tag>
      </tags>
  </entry>
  <entry>
    <title>目录大全|人工智能</title>
    <url>/2020/07/15/mu-lu-da-quan-ren-gong-zhi-neng/</url>
    <content><![CDATA[<p>人工智能系列目录汇总</p>
<a id="more"></a>
<blockquote>
<p>人工智能基础系列</p>
</blockquote>
<ul>
<li>数理基础<ul>
<li>线性代数</li>
<li>概率论</li>
</ul>
</li>
<li>算法基础<ul>
<li>特征工程</li>
<li>优化算法</li>
</ul>
</li>
</ul>
<blockquote>
<p>人工智能算法系列</p>
</blockquote>
<ul>
<li>人工智能算法汇总介绍</li>
<li>经典算法<ul>
<li>决策树</li>
<li>支持向量机</li>
<li>逻辑回归</li>
</ul>
</li>
<li>高阶算法<ul>
<li>神经网络</li>
</ul>
</li>
<li>集成学习<ul>
<li>bagging</li>
<li>boosting</li>
<li>随机森林</li>
<li>gbdt</li>
</ul>
</li>
<li>非监督学习<ul>
<li>自然语言处理</li>
<li>聚类算法</li>
</ul>
</li>
</ul>
<blockquote>
<p>人工智能应用系列</p>
</blockquote>
<ul>
<li>应用场景简介<ul>
<li>营销获客</li>
<li>风控</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>目录</tag>
      </tags>
  </entry>
  <entry>
    <title>目录大全|金融科技</title>
    <url>/2020/04/16/mu-lu-da-quan-jin-rong-ke-ji/</url>
    <content><![CDATA[<p>金融科技相关目录汇总</p>
<a id="more"></a>

<blockquote>
<p>金融科技业务篇</p>
</blockquote>
<ul>
<li>金融产品</li>
<li>前端产品</li>
<li>获客渠道</li>
<li>客户运营</li>
</ul>
<blockquote>
<p>金融科技系统篇</p>
</blockquote>
<ul>
<li>业务系统</li>
<li>数据系统</li>
<li>风控系统</li>
<li>营销系统</li>
</ul>
<blockquote>
<p>风控知识篇</p>
</blockquote>
<ul>
<li>Vintage分析法</li>
<li>迁徙率(Flow Rate)分析</li>
<li><a href="https://zhuanlan.zhihu.com/p/151580824" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/151580824</a></li>
</ul>
<blockquote>
<p>风控数据篇</p>
</blockquote>
<ul>
<li>数据分类</li>
</ul>
<blockquote>
<p>风控模型篇</p>
</blockquote>
<ul>
<li>建模过程简介</li>
<li>催收评分卡[<a href="https://zhuanlan.zhihu.com/p/136592948]" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/136592948]</a></li>
</ul>
<blockquote>
<p>风控策略篇</p>
</blockquote>
<ul>
<li><p>贷前风控策略框架</p>
</li>
<li><p>贷前反欺诈策略[<a href="https://zhuanlan.zhihu.com/p/137621462]" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/137621462]</a></p>
</li>
<li><p>准入策略</p>
</li>
<li><p>额度策略</p>
</li>
<li><p>贷中策略</p>
</li>
<li><p>业务冷启动</p>
</li>
</ul>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>目录</tag>
      </tags>
  </entry>
</search>
